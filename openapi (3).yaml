openapi: 3.0.3

# info
info:
  title: Swagger Test
  description: tagsとsecurityについて
  version: 1.0.11
  
# サーバー(今回server response見ないため使わない)
  
# タグ
tags:
  - name: dish
    description: 皿
  - name: tableware
    description: 食器
  
paths:
  /dish:
    get:
      tags:
        - dish
      summary: 皿一覧取得
      description: パラメータによる取得
      operationId: fetchDataList
      parameters:
        - in: query
          name: id
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
            maxLength: 64 
        - in: query
          name: modified
          schema:
            type: string
            format: date-time
        - in: query
          name: table_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    format: int64
                    minimum: 0
                    example: 77
                  name:
                    type: string
                    example: testName
                  modified:
                    type: string
                    format: date-time
                    example: 1997-07-16T9:20:30+01:00
                  is_deleted:
                    type: boolean
                    example: false
                  table_id: 
                    type: integer
                    format: int64
              examples:
                Success:
                  $ref: '#/components/examples/DishFetchDataListSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - dish
      summary: 皿登録
      operationId: createDish
      parameters: []
      requestBody:
       content:
        application/json:
          schema:
            $ref: '#/components/schemas/dish'
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '201':
          $ref: '#/components/responses/CreateSuccess'
  /dish/{id}:
    get:
      tags: 
        - dish
      summary: 皿情報取得
      description: idを指定して取得
      operationId: findByDishId
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        '200':
          description: seccess
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dish'
              examples:
                Success:
                  $ref: '#/components/examples/DishFetchDataSuccess'
          links:
            FindByTableId:
              $ref: '#/components/links/FindByTableId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
      # readを指定
        - oauth2: [read]
    delete:
      tags:
        - dish
      summary: 食器削除処理
      description: idを指定して論理削除
      parameters:
        - in: path
          name: id
          description: id指定
          required: true
          schema:
            type: integer
      responses:
        '200':
           $ref: '#/components/responses/DeleteSuccess'
    put:
      tags:
        - dish
      summary: 食器変更処理
      description: 変更処理
      parameters:
        - in: path
          name: id
          description: id指定
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dish'
      responses:
        '200':
          description: seccess
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dish'
              examples:
                Success:
                  $ref: '#/components/examples/UpdateSuccess'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /tableware/{id}:
    get:
      tags: 
        - tableware
      summary: 食器情報取得
      description: idを指定して取得
      operationId: findByTablewareId
      parameters:
        - in: path
          name: id
          description: id指定
          required: true
          schema: 
            type: integer
            format: int64
      responses:
        '200':
          description: seccess
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    format: int64
                    minimum: 0
              examples:
                Success1:
                  $ref: '#/components/examples/TableSuccess'
                Success2:
                  $ref: '#/components/examples/TableSuccess2'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    
security:
  - dish_bearer_auth: []
  - basic_auth: []
  - open_id_connected: []
  
components:
  # レスポンス
  responses:
    NotFound:
      description: data Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples: 
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            BadRequest:
              $ref: '#/components/examples/BadRequest'
    CreateSuccess:
      description: create success
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/Error'
          examples:
            CreateSuccess:
              $ref: '#/components/examples/CreateSuccess'
    DeleteSuccess:
      description: delete success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            DeleteSuccess:
              $ref: '#/components/examples/DeleteSuccess'
  schemas:
    user:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        - id: 23
          name: testname
        - id: 2
          name: testName2
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    dish:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          minimum: 0
          example: 1
        name:
          type: string
          example: testName
        modified:
          type: string
          format: date-time
        is_deleted:
          type: boolean
        table_id: 
          type: integer
          format: int64
          example: 2
  # example
  examples:
    NotFoundExample:
      value:
        - code: 404
        - message: not found
    BadRequest:
      value:
        - code: 400
        - message: bad request
    CreateSuccess:
      value:
        - code: 201
        - message: create success
        - data:
          - id: 7
            name: testName
            modified: 2021-12-30T0:23:23+00:00
            table_id: 2
            is_deleted: false
    DeleteSuccess:
      value:
        - code: 200
        - message: delete success
    UpdateSuccess:
      value:
        - code: 200
        - message: update success
        - data:
          - id: 4
            name: updateTestName
            modified: 2021-12-30T0:23:23+00:00
            table_id: 3
            is_deleted: false
    TableSuccess:
      value:
        - code: 200
        - message: success
        - data:
          - id: 1
    TableSuccess2:
      value:
        - code: 200
        - message: success
        - data:
          - id: 10
    DishFetchDataSuccess:
      value:
        - code: 200
        - message: success
        - data:
          - id: 1
            name: testName
            modified: 2001-03-23T0:23:23+00:00
            is_deleted: true
            table_id: 1
    DishFetchDataListSuccess:
      value:
        - code: 200
        - message: success
        - data:
          - id: 5
            name: testName3
            modified: 2101-03-23T0:23:23+00:00
            is_deleted: true
            table_id: 1
          - id: 6
            name: testName4
            modified: 2021-03-23T0:13:23+00:00
            table_id: 8
            is_deleted: false
  # parameters
  parameters:
    idPath:
      in: path
      name: id
      description: id指定
      required: true
      schema: 
        type: integer
        format: int64
  links:
    FindByTableId:
      operationId: FindByTableId
      parameters:
        id: '$response.body#/table_id'
  securitySchemes:
    dish_bearer_auth:
      type: http
      scheme: bearer
    basic_auth:
      type: http
      scheme: basic
    api_key_auth:
      type: apiKey
      in: header
      name: X-API-Key
    open_id_connected:
      type: openIdConnect
      openIdConnectUrl: https://example.com
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://example.com
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: dish read access
      
      
      
      
      